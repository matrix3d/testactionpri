varying tex0_color;
varying tex1_fog;
varying out_normal;
#vs
uniform tiling;
void main()
{
	var pos;
	// Lightmap UV
	if(VB_BONE_WEIGHT){
		var skinTemp;
		var bonePos = bones[VB_BONE_WEIGHT.x];
		var quat = frc(bonePos);
		bonePos = (bonePos - quat) * 0.00048828125;
		quat = quat * 2.004008016032064 - 1;
		// 旋转
		skinTemp.xyz = crs(quat.xyz, VB_POSITION) * 2;
		pos.xyz = crs(quat.xyz, skinTemp.xyz) + VB_POSITION + quat.w * skinTemp.xyz;
		// 缩放位移
		pos.xyz = (pos.xyz + bonePos.xyz) * bonesPos.w + bonesPos.xyz;
	}
	else pos.xyz = m34(VB_POSITION, wm);
	pos.w=1;
	
	if(!DEFERRED)
	{
		var temp2;
		temp2.xy = pos.xz * 0.00390625;
		temp2.y = -temp2.y;
		tex1_fog = temp2.xyyy;
	}
	
	// out
	pos = m44(pos, vpm);
	o = pos;
	
	//
	if(tiling)
		tex0_color.xy = VB_UV.xy * tiling.xy;
	else 
		tex0_color.xy = VB_UV.xy;
		
	if(verticeAlpha)
		tex0_color.zw = VB_ALPHA.x;
	else
		tex0_color.zw = VB_UV.x;
	
	// Fog
	//pos.w /= 32;
	//pos.w -= 1;
	//tex1_fog.w = sat(pos.w);
	//pos.w = 1 - pos.w;
	//tex1_fog.z = sat(pos.w);

	
	// Normal
	if(VB_BONE_WEIGHT){
		// 旋转
		skinTemp.xyz = crs(quat.xyz, VB_NORMAL) * 2;
		pos.xyz = crs(quat.xyz, skinTemp.xyz) + VB_NORMAL + quat.w * skinTemp.xyz;
		pos.xyz=m33(pos, vm);
	}
	else pos.xyz = m33(VB_NORMAL, wvm);
	pos.xyz = nrm(pos.xyz);
	out_normal = pos;
}

#ps
sampler mainTexture;
void main()
{
	var color0 = tex(tex0_color, mainTexture<2d, repeat, linear, nomip>);
	// Alpha剔除
	var color1;
	color1.x = color0.w - 0.25;
	kil(color1.x);
	
	if(verticeAlpha)
		color0.w *= tex0_color.z;
	
	if(DEFERRED)
	{
		o0 = color0;
		if(verticeAlpha){
			#Blend 1
			o1 = 0;
		} else{
			#Blend 0
			color1.xyz = nrm(out_normal.xyz);
			color1.z = out_normal.w;
			color1.w = 1;
			o1 = color1;
		}
	}
	else
	{
		// Lightmap
		color1 = tex(tex1_fog.xy, lightmapTexture<2d, repeat, linear, nomip>);
		color0 *= color1;
		//color0.xyz *= 1.5;
	
		// 法线nrm
		var normal;
		normal.xyz = nrm(out_normal.xyz);
		// 修正反法线
		//normal.w = slt(normal.z,0);
		//normal.w *= 2;
		//normal.w -= 1;
		//normal.xyz *= normal.w;
	
		// 光照
		normal.w = dp3(normal.xyz, light);
		color1.w = max(normal.w,0) + 0.3;
		color0.xyz *= color1.w;
	
		// Fog
		//color1 = fog;
		//color1 *= tex1_fog.w;
		//color0 *= tex1_fog.z;
		//color0.xyz += color1.xyz;
		o = color0;
	}
}