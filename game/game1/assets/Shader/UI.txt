varying tex0;
varying tex1;
uniform grayscale;
uniform blendColor;
uniform radialMask;
sampler _MainTex;

Pass{
#RenderQueue -2
#Blend one oneMinusSourceAlpha
#ZWrite Off
#ZTest off

void vs()
{
	// x,y,z,w,x,y,z,w
	// x1,y1,u1,v1,x2,y2,u2,v2
	var temp;
	
	temp.xz = tempm[VB_UV.x];
	temp.yw = tempm[VB_UV.y];
	// uv
	tex0 = temp.zw;
	
	temp.zw = [1, 1, 0.5, 1];
	o = m44(temp, wvpm);
	#if circleMask
	#if radialMask
	// uv2
	temp = VB_UV.yx - 0.5;
	temp.x = -temp.x;
	tex1=temp;
	#endif
	#endif
}

void ps()
{
	var temp;
	// 圆形遮罩
#if circleMask
	temp.x = 0.5 - dp4(tex1.xyxy, tex1.xyxy);
	kil(temp.x);
#endif

	// 径向遮罩
#if radialMask
	// atan2(y,x) [-0.5, 0.5]
	var axyr;
	axyr.xy = sge(tex1.xy, 0);
	axyr.xy += axyr.xy;
	axyr.xy -= 1;
	// r
	axyr.z = axyr.y * tex1.y + 4.9e-324;
	var temp;
	temp.w=tex1.x-axyr.x*axyr.z;
	temp.y=axyr.x*tex1.x+axyr.z;
	axyr.z=temp.w/temp.y;
	
	axyr.w = (2 - axyr.x)* 0.125;
	var dest;
	dest.x = (axyr.z * axyr.z * 0.03125 - 0.15625)* axyr.z + axyr.w;
	dest.x *= axyr.y; // [-0.5, 0.5]
	// [0, 1]
	axyr.y = sge(dest.x, 0);
	axyr.y = 1 - axyr.y;
	dest.x += axyr.y;
	dest.x = radialMask - dest.x;
	kil(dest.x);
#endif

#if _MainTex
	var tc = tex(tex0, _MainTex<2d, repeat, linear, nomip>);
	//tc.xyz*=tc.w;
#else
	var tc = 1;
#endif

	//tc.y = tex0.x+tex0.y*20;
	//tc.x = sin(tex0.x*20)+cos(tex0.y*20)+sin(tex0.x*20+tex0.y*20+time.z);//;
	//tc.xyz = tc.x-tc.x*tc.x;
#if grayscale
	tc.xyz = dp3(tc.xyz, [0.3086, 0.6094, 0.082]);// * grayscale.x + (1-grayscale.x)*tc.xyz;
#endif


#ifdef _PREMULT_ON
	tc.xyz*=tc.w;
#endif

#if blendColor
	tc *= blendColor;
	//tc.xyz *= blendColor.w;
#endif
	o = tc;

}
}